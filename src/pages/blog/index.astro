---
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import { SITE_TITLE } from '../../consts';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('blog');
const posts = allPosts.sort((a, b) => {
  const dateA = new Date(a.data.pubDate);
  const dateB = new Date(b.data.pubDate);
  return dateB.valueOf() - dateA.valueOf();
});

// Group posts by year and month
const postsByYear = posts.reduce((acc, post) => {
  const date = new Date(post.data.pubDate);
  const year = date.getFullYear();
  const month = date.toLocaleDateString('en-US', { month: 'long' });
  const day = date.getDate();
  
  if (!acc[year]) {
    acc[year] = {};
  }
  if (!acc[year][month]) {
    acc[year][month] = [];
  }
  
  acc[year][month].push({ ...post, day });
  return acc;
}, {});

// Calculate reading time (rough estimate: 200 words per minute)
function calculateReadingTime(content: string): number {
  const wordsPerMinute = 200;
  const wordCount = content.split(/\s+/).length;
  return Math.ceil(wordCount / wordsPerMinute);
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Blog - ${SITE_TITLE}`} description="Thoughts, insights, and tutorials on software development." />
	</head>
	<body>
		<Header />
		<main>
			<div class="section-header">
				<h1>All Posts</h1>
				<p>Browse all blog posts by year and month</p>
			</div>

			{posts.length > 0 ? (
				<div class="blog-posts-list">
					{Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a)).map(year => (
						<div class="year-section">
							<h2 class="year-header">{year}</h2>
							{Object.keys(postsByYear[year]).sort((a, b) => {
								const monthOrder = ['January', 'February', 'March', 'April', 'May', 'June', 
									'July', 'August', 'September', 'October', 'November', 'December'];
								return monthOrder.indexOf(b) - monthOrder.indexOf(a);
							}).map(month => (
								<div class="month-section">
									<h3 class="month-header">{month}</h3>
									{postsByYear[year][month].map(post => {
										const readingTime = calculateReadingTime(post.body);
										return (
											<article class="blog-post-item">
												<div class="post-date">
													{post.day}
												</div>
												<div class="post-content">
													<h4 class="post-title">
														<a href={`/blog/${post.slug}/`}>{post.data.title}</a>
													</h4>
													{post.data.description && (
														<p class="post-description">{post.data.description}</p>
													)}
													<div class="post-meta">
														<span class="published-date">Published: {new Date(post.data.pubDate).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</span>
														<span class="reading-time">â€¢ {readingTime} min read</span>
													</div>
												</div>
											</article>
										);
									})}
								</div>
							))}
						</div>
					))}
				</div>
			) : (
				<div class="card" style="text-align: center; padding: 3rem;">
					<h3>No articles yet</h3>
					<p>Check back soon for new blog posts!</p>
				</div>
			)}
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem;
	}

	.section-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.section-header h1 {
		font-size: 2.5rem;
		margin-bottom: 1rem;
		color: var(--accent);
	}

	.section-header p {
		font-size: 1.1rem;
		color: rgb(var(--gray));
		max-width: 500px;
		margin: 0 auto;
	}

	.blog-posts-list {
		max-width: 800px;
		margin: 0 auto;
	}

	.year-section {
		margin-bottom: 3rem;
	}

	.year-header {
		font-size: 2rem;
		color: var(--accent);
		margin-bottom: 1.5rem;
		border-bottom: 2px solid var(--accent-100);
		padding-bottom: 0.5rem;
	}

	.month-section {
		margin-bottom: 2rem;
	}

	.month-header {
		font-size: 1.3rem;
		color: rgb(var(--black));
		margin-bottom: 1rem;
		font-weight: 600;
	}

	.blog-post-item {
		display: flex;
		align-items: flex-start;
		gap: 1rem;
		padding: 1rem 0;
		border-bottom: 1px solid var(--card-border);
		transition: all 0.2s ease;
	}

	.blog-post-item:hover {
		background: var(--accent-50);
		margin: 0 -1rem;
		padding: 1rem;
		border-radius: 8px;
	}

	.blog-post-item:last-child {
		border-bottom: none;
	}

	.post-date {
		font-size: 1.1rem;
		font-weight: 600;
		color: var(--accent);
		min-width: 2rem;
		text-align: center;
	}

	.post-content {
		flex: 1;
	}

	.post-title {
		margin: 0 0 0.5rem 0;
		font-size: 1.1rem;
		line-height: 1.4;
	}

	.post-title a {
		color: rgb(var(--black));
		text-decoration: none;
		transition: color 0.2s ease;
	}

	.post-title a:hover {
		color: var(--accent);
	}

	.post-description {
		margin: 0.5rem 0 0.75rem 0;
		color: rgb(var(--gray-dark));
		font-size: 0.9rem;
		line-height: 1.4;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}

	.post-meta {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 0.85rem;
		color: rgb(var(--gray));
	}

	.published-date {
		font-weight: 500;
	}

	.reading-time {
		background: var(--accent-100);
		color: var(--accent-dark);
		padding: 0.2rem 0.5rem;
		border-radius: 4px;
		font-size: 0.75rem;
		font-weight: 600;
	}

	@media (max-width: 768px) {
		main {
			padding: 1rem;
		}

		.section-header h1 {
			font-size: 2rem;
		}

		.blog-posts-list {
			max-width: 100%;
		}

		.year-header {
			font-size: 1.5rem;
		}

		.month-header {
			font-size: 1.1rem;
		}

		.blog-post-item {
			flex-direction: column;
			gap: 0.5rem;
		}

		.post-date {
			text-align: left;
			min-width: auto;
		}

		.post-meta {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.25rem;
		}
	}
</style>